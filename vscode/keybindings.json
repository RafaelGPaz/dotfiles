// My Emacs Keybindings
[
// Custom
{ "key": "ctrl+k h",              "command": "workbench.action.maximizeEditor", "when": "editorTextFocus" }, // Expand Current Buffer
{ "key": "ctrl+k t",              "command": "workbench.action.evenEditorWidths", "when": "editorTextFocus" }, // Even Buffers
{ "key": "ctrl+4",                "command": "workbench.action.terminal.focus" }, // Focus Term
{ "key": "ctrl+w t",              "command": "cursorTop", "when": "editorTextFocus" }, // Scroll Top Window
{ "key": "ctrl+w b",              "command": "cursorBottom", "when": "editorTextFocus" }, // Scroll Bottom Window
{ "key": "shift+alt+u",           "command": "scrollPageUp", "when": "editorTextFocus" }, // Scroll Window  Up
{ "key": "shift+alt+d",           "command": "scrollPageDown", "when": "editorTextFocus" }, // Scroll Window Down
{ "key": "alt+d",                 "command": "deleteWordEndRight",  "when": "editorTextFocus" }, // Delete Prev Word

// Delete
// { "key": "delete",                "command": "deleteRight", "when": "editorTextFocus && !editorReadonly" }, // Delete Prev Char
// { "key": "alt+d",                 "command": "deleteWordEndRight",  "when": "editorTextFocus" }, // Delete Prev Word
// { "key": "ctrl+backspace",        "command": "deleteWordLeft",  "when": "editorTextFocus" }, // Delete Prev Word
// Move
{ "key": "ctrl+f",                "command": "cursorRight", "when": "editorTextFocus" }, // Move Char Right
{ "key": "ctrl+b",                "command": "cursorLeft",  "when": "editorTextFocus" }, // Move Char Left
{ "key": "alt+b",                 "command": "cursorWordLeft", "when": "editorTextFocus" }, // Move Prev Word
{ "key": "alt+f",                 "command": "cursorWordRight", "when": "editorTextFocus" }, // Move Next Word
{ "key": "ctrl+n",                "command": "cursorDown", "when": "editorTextFocus" }, // Move Next Line
{ "key": "ctrl+p",                "command": "cursorUp", "when": "editorTextFocus" }, // Move Prev Line
{ "key": "ctrl+a",                "command": "cursorHome", "when": "editorTextFocus" }, // Move Beginning Line
{ "key": "ctrl+e",                "command": "cursorEnd", "when": "editorTextFocus" }, // Move End Line
{ "key": "ctrl+u",                "command": "cursorUndo", "when": "editorTextFocus" }, // Go to Cursor Last Position
 // Cutting & Pasting
// { "key": "ctrl+c",                "command": "editor.action.clipboardCopyAction" }, // Copy
// { "key": "ctrl+y",                "command": "editor.action.clipboardPasteAction" }, // Paste
// { "key": "ctrl+k",                "command": "editor.action.deleteLines", "when": "editorTextFocus" }, // Delete Line
{ "key": "ctrl+j",                "command": "extension.join-lines" }, // Join lines
// Scroll & Windows
// { "key": "ctrl+w t",              "command": "cursorTop", "when": "editorTextFocus" }, // Scroll Top Window
// { "key": "ctrl+w b",              "command": "cursorPageDown", "when": "editorTextFocus" }, // Scroll Bottom Window
// { "key": "alt+down",              "command": "scrollLineDown", "when": "editorTextFocus" }, // Scroll Line up
// { "key": "alt+up",                "command": "scrollLineUp", "when": "editorTextFocus" }, // Scroll Line Up
// { "key": "ctrl+v",                "command": "scrollPageDown", "when": "editorTextFocus" }, // Scroll Window Down
// { "key": "alt+v",                 "command": "scrollPageUp", "when": "editorTextFocus" }, // Scroll Window  Up
// { "key": "ctrl+x 1",              "command": "workbench.action.closeEditorsInOtherGroups", "when": "editorTextFocus" }, // Close other Windows
// { "key": "ctrl+x 2",              "command": "workbench.action.splitEditor", "when": "editorTextFocus" }, // Split Horizantally
// { "key": "ctrl+x 3",              "command": "workbench.action.toggleEditorGroupLayout", "when": "editorTextFocus" }, // Split Vertically
// { "key": "ctrl+1",                "command": "workbench.action.focusFirstEditorGroup" }, // Focus 1st
// { "key": "ctrl+2",                "command": "workbench.action.focusSecondEditorGroup" }, // Focus 2nd
// { "key": "ctrl+3",                "command": "workbench.action.focusThirdEditorGroup" }, // Focus 3rd
// { "key": "ctrl+4",                "command": "workbench.action.terminal.focus" }, // Focus Term
// Files & Buffers
{ "key": "ctrl+x f",              "command": "workbench.action.files.openFile", "when": "editorTextFocus" }, // Find File
{ "key": "ctrl+x B",              "command": "workbench.action.files.showOpenedFileInNewWindow", "when": "editorTextFocus" }, // Find File
{ "key": "ctrl+x s",              "command": "workbench.action.files.save", "when": "editorTextFocus" }, // Save File
{ "key": "ctrl+x w",              "command": "workbench.action.files.saveAs", "when": "editorTextFocus" }, // Save As
{ "key": "ctrl+x w",              "command": "workbench.action.files.saveFiles", "when": "editorTextFocus" }, // Save All
// Buffers
{ "key": "ctrl+x k",              "command": "workbench.action.closeActiveEditor", "when": "editorTextFocus" }, // Kill Buffer
// Editing
{ "key": "ctrl+alt+s",            "command": "actions.find", "when": "editorTextFocus" }, // Find
{ "key": "ctrl+z",                "command": "undo", "when": "editorTextFocus && !editorReadonly" }, // Undo
{ "key": "shift+ctrl+z",          "command": "redo", "when": "editorTextFocus && !editorReadonly" }, // Redo
{ "key": "shift+ctrl+up",         "command": "editor.action.copyLinesUpAction", "when": "editorTextFocus && !editorReadonly" }, // Duplicate Line Up
{ "key": "shift+ctrl+down",       "command": "editor.action.copyLinesDownAction", "when": "editorTextFocus && !editorReadonly" }, // Duplicate Line Down
{ "key": "ctrl+enter",            "command": "editor.action.insertLineAfter", "when": "editorTextFocus && !editorReadonly" }, // Open Line Below
{ "key": "ctrl+shift+enter",      "command": "editor.action.insertLineBefore", "when": "editorTextFocus && !editorReadonly" }, // Open Line Above
{ "key": "shift+alt+f",           "command": "editor.action.formatDocument", "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly" }, // Format Document
{ "key": "ctrl+k ctrl+f",         "command": "editor.action.formatSelection", "when": "editorHasDocumentFormattingProvider && editorHasSelection && editorTextFocus && !editorReadonly" }, // Format Selection
{ "key": "alt+l",                 "command": "extension.changeCase.lower", "when": "editorTextFocus && !editorReadonly" },  // Transform Lowercase
// { "key": "alt+u",                 "command": "extension.changeCase.upper", "when": "editorTextFocus && !editorReadonly" }, // Transform Upper Case
{ "key": "alt+c",                 "command": "extension.changeCase.upperFirst", "when": "editorTextFocus && !editorReadonly" },  // Transform Capitalise
// { "key": "ctrl+up",               "command": "editor.action.moveLinesUpAction", "when": "editorTextFocus && !editorReadonly" }, // Scroll Line/Selection Down
// { "key": "ctrl+down",             "command": "editor.action.moveLinesDownAction", "when": "editorTextFocus && !editorReadonly" }, // Move Line/Selection Uup
 // Selection & Multiple Cursors
{ "key": "ctrl+x h",              "command": "editor.action.selectAll", "when": "editorTextFocus" }, // Select All
{ "key": "ctrl+i",                "command": "expandLineSelection", "when": "editorTextFocus" }, // Select Current Line
{ "key": "alt+shift+up",          "command": "editor.action.insertCursorAbove", "when": "editorTextFocus" }, // Multiple Cursor Up
{ "key": "alt+shift+down",        "command": "editor.action.insertCursorBelow", "when": "editorTextFocus" }, // Multiple Cursor Down
// { "key": "shift+alt+right",       "command": "editor.action.smartSelect.grow", "when": "editorTextFocus" }, // Expand Selection
// { "key": "shift+alt+leftt",       "command": "editor.action.smartSelect.shrink", "when": "editorTextFocus" }, // Contract Selection
{ "key": "shift+alt+right",       "command": "expand_region", "when": "editorTextFocus" }, // Expand Selection
{ "key": "shift+alt+left",        "command": "undo_expand_region", "when": "editorTextFocus" }, // Contract Selection
// { "key": "ctrl+d",                "command": "editor.action.addSelectionToNextFindMatch", "when": "editorFocus" }, // Repeat Selection Down
// { "key": "ctrl+shift+d",          "command": "editor.action.addSelectionToPreviousFindMatch", "when": "editorFocus" }, // Repeat Selection Up
// Show
{ "key": "ctrl+shift+p",          "command": "workbench.action.showCommands", "when": "editorTextFocus" }, // Show Commands
{ "key": "ctrl+x b",              "command": "workbench.action.showAllEditors", "when": "editorTextFocus" }, // Show Buffers
{ "key": "ctrl+x s",              "command": "workbench.action.showAllSymbols", "when": "editorTextFocus" }, // Show Symbols
// Go To
{ "key": "ctrl+g s",              "command": "workbench.action.gotoSymbol", "when": "editorTextFocus" }, // Go to Symbol
{ "key": "ctrl+g l",              "command": "workbench.action.gotoLine", "when": "editorTextFocus" }, // Go to Line
{ "key": "ctrl+g c",              "command": "workbench.action.openGlobalSettings"}, // Go To Global Settings Config
{ "key": "ctrl+g k",              "command": "workbench.action.openGlobalKeybindings"}, // Go To Global Keybindings
{ "key": "ctrl+g m",              "command": "editor.action.jumpToBracket"}, // Go To Matching Bracket
// Toggle
{ "key": "ctrl+;",                "command": "workbench.action.toggleSidebarVisibility"}, // Toggle Sidebar
// { "key": "ctrl+w w",              "command": "editor.action.toggleWordWrap"}, // Toggle Wrap Lines
{ "key": "ctrl+`",                "command": "workbench.action.terminal.toggleTerminal"}, // Toggle Terminal
{ "key": "alt+/",                 "command": "editor.action.commentLine"}, // Toggle Line Comment
{ "key": "shift+alt+/",           "command": "editor.action.blockComment"}, // Toggle Block Comment
// Folding
{ "key": "ctrl+shift+[",          "command": "editor.fold", "when": "editorTextFocus" },
{ "key": "ctrl+shift+]",          "command": "editor.unfold", "when": "editorTextFocus" },
{ "key": "alt+shift+]",           "command": "editor.unfoldAll", "when": "editorTextFocus" },
{ "key": "alt+shift+[",           "command": "editor.foldAll", "when": "editorTextFocus" },
// Ace Jump
{ "key": "alt+enter",             "command": "extension.aceJump" }

 // Bookmarks
// - Toggle: Ctrl+shift+#
// - Jump: Ctrl+#
// - Delete all: Ctrl+shift+p > "num" clear
// - List all: Ctrl+shift+p > "num" list
 ]